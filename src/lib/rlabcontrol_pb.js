// source: protos/rlabcontrol.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

goog.exportSymbol('proto.rlabcontrol.DataType', null, global);
goog.exportSymbol('proto.rlabcontrol.ExperimentTask', null, global);
goog.exportSymbol('proto.rlabcontrol.MeasurementResult', null, global);
goog.exportSymbol('proto.rlabcontrol.NumericArray', null, global);
goog.exportSymbol('proto.rlabcontrol.SettingValue', null, global);
goog.exportSymbol('proto.rlabcontrol.Value', null, global);
goog.exportSymbol('proto.rlabcontrol.Value.ValueCase', null, global);
goog.exportSymbol('proto.rlabcontrol.WrapperMessage', null, global);
goog.exportSymbol('proto.rlabcontrol.WrapperMessage.MessageTypeCase', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rlabcontrol.WrapperMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.rlabcontrol.WrapperMessage.oneofGroups_);
};
goog.inherits(proto.rlabcontrol.WrapperMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rlabcontrol.WrapperMessage.displayName = 'proto.rlabcontrol.WrapperMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rlabcontrol.ExperimentTask = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rlabcontrol.ExperimentTask.repeatedFields_, null);
};
goog.inherits(proto.rlabcontrol.ExperimentTask, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rlabcontrol.ExperimentTask.displayName = 'proto.rlabcontrol.ExperimentTask';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rlabcontrol.SettingValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rlabcontrol.SettingValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rlabcontrol.SettingValue.displayName = 'proto.rlabcontrol.SettingValue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rlabcontrol.Value = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.rlabcontrol.Value.oneofGroups_);
};
goog.inherits(proto.rlabcontrol.Value, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rlabcontrol.Value.displayName = 'proto.rlabcontrol.Value';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rlabcontrol.MeasurementResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rlabcontrol.MeasurementResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rlabcontrol.MeasurementResult.displayName = 'proto.rlabcontrol.MeasurementResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rlabcontrol.NumericArray = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rlabcontrol.NumericArray.repeatedFields_, null);
};
goog.inherits(proto.rlabcontrol.NumericArray, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rlabcontrol.NumericArray.displayName = 'proto.rlabcontrol.NumericArray';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.rlabcontrol.WrapperMessage.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.rlabcontrol.WrapperMessage.MessageTypeCase = {
  MESSAGE_TYPE_NOT_SET: 0,
  TASK: 1,
  RESULT: 2
};

/**
 * @return {proto.rlabcontrol.WrapperMessage.MessageTypeCase}
 */
proto.rlabcontrol.WrapperMessage.prototype.getMessageTypeCase = function() {
  return /** @type {proto.rlabcontrol.WrapperMessage.MessageTypeCase} */(jspb.Message.computeOneofCase(this, proto.rlabcontrol.WrapperMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rlabcontrol.WrapperMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.rlabcontrol.WrapperMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rlabcontrol.WrapperMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rlabcontrol.WrapperMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    task: (f = msg.getTask()) && proto.rlabcontrol.ExperimentTask.toObject(includeInstance, f),
    result: (f = msg.getResult()) && proto.rlabcontrol.MeasurementResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rlabcontrol.WrapperMessage}
 */
proto.rlabcontrol.WrapperMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rlabcontrol.WrapperMessage;
  return proto.rlabcontrol.WrapperMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rlabcontrol.WrapperMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rlabcontrol.WrapperMessage}
 */
proto.rlabcontrol.WrapperMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rlabcontrol.ExperimentTask;
      reader.readMessage(value,proto.rlabcontrol.ExperimentTask.deserializeBinaryFromReader);
      msg.setTask(value);
      break;
    case 2:
      var value = new proto.rlabcontrol.MeasurementResult;
      reader.readMessage(value,proto.rlabcontrol.MeasurementResult.deserializeBinaryFromReader);
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rlabcontrol.WrapperMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rlabcontrol.WrapperMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rlabcontrol.WrapperMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rlabcontrol.WrapperMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTask();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rlabcontrol.ExperimentTask.serializeBinaryToWriter
    );
  }
  f = message.getResult();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rlabcontrol.MeasurementResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional ExperimentTask task = 1;
 * @return {?proto.rlabcontrol.ExperimentTask}
 */
proto.rlabcontrol.WrapperMessage.prototype.getTask = function() {
  return /** @type{?proto.rlabcontrol.ExperimentTask} */ (
    jspb.Message.getWrapperField(this, proto.rlabcontrol.ExperimentTask, 1));
};


/**
 * @param {?proto.rlabcontrol.ExperimentTask|undefined} value
 * @return {!proto.rlabcontrol.WrapperMessage} returns this
*/
proto.rlabcontrol.WrapperMessage.prototype.setTask = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.rlabcontrol.WrapperMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rlabcontrol.WrapperMessage} returns this
 */
proto.rlabcontrol.WrapperMessage.prototype.clearTask = function() {
  return this.setTask(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rlabcontrol.WrapperMessage.prototype.hasTask = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional MeasurementResult result = 2;
 * @return {?proto.rlabcontrol.MeasurementResult}
 */
proto.rlabcontrol.WrapperMessage.prototype.getResult = function() {
  return /** @type{?proto.rlabcontrol.MeasurementResult} */ (
    jspb.Message.getWrapperField(this, proto.rlabcontrol.MeasurementResult, 2));
};


/**
 * @param {?proto.rlabcontrol.MeasurementResult|undefined} value
 * @return {!proto.rlabcontrol.WrapperMessage} returns this
*/
proto.rlabcontrol.WrapperMessage.prototype.setResult = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.rlabcontrol.WrapperMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rlabcontrol.WrapperMessage} returns this
 */
proto.rlabcontrol.WrapperMessage.prototype.clearResult = function() {
  return this.setResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rlabcontrol.WrapperMessage.prototype.hasResult = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rlabcontrol.ExperimentTask.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rlabcontrol.ExperimentTask.prototype.toObject = function(opt_includeInstance) {
  return proto.rlabcontrol.ExperimentTask.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rlabcontrol.ExperimentTask} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rlabcontrol.ExperimentTask.toObject = function(includeInstance, msg) {
  var f, obj = {
    settingsMap: (f = msg.getSettingsMap()) ? f.toObject(includeInstance, proto.rlabcontrol.SettingValue.toObject) : [],
    measureList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rlabcontrol.ExperimentTask}
 */
proto.rlabcontrol.ExperimentTask.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rlabcontrol.ExperimentTask;
  return proto.rlabcontrol.ExperimentTask.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rlabcontrol.ExperimentTask} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rlabcontrol.ExperimentTask}
 */
proto.rlabcontrol.ExperimentTask.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getSettingsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.rlabcontrol.SettingValue.deserializeBinaryFromReader, "", new proto.rlabcontrol.SettingValue());
         });
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addMeasure(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rlabcontrol.ExperimentTask.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rlabcontrol.ExperimentTask.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rlabcontrol.ExperimentTask} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rlabcontrol.ExperimentTask.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSettingsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.rlabcontrol.SettingValue.serializeBinaryToWriter);
  }
  f = message.getMeasureList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * map<string, SettingValue> settings = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.rlabcontrol.SettingValue>}
 */
proto.rlabcontrol.ExperimentTask.prototype.getSettingsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.rlabcontrol.SettingValue>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.rlabcontrol.SettingValue));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.rlabcontrol.ExperimentTask} returns this
 */
proto.rlabcontrol.ExperimentTask.prototype.clearSettingsMap = function() {
  this.getSettingsMap().clear();
  return this;};


/**
 * repeated string measure = 2;
 * @return {!Array<string>}
 */
proto.rlabcontrol.ExperimentTask.prototype.getMeasureList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.rlabcontrol.ExperimentTask} returns this
 */
proto.rlabcontrol.ExperimentTask.prototype.setMeasureList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.rlabcontrol.ExperimentTask} returns this
 */
proto.rlabcontrol.ExperimentTask.prototype.addMeasure = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rlabcontrol.ExperimentTask} returns this
 */
proto.rlabcontrol.ExperimentTask.prototype.clearMeasureList = function() {
  return this.setMeasureList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rlabcontrol.SettingValue.prototype.toObject = function(opt_includeInstance) {
  return proto.rlabcontrol.SettingValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rlabcontrol.SettingValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rlabcontrol.SettingValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    valuesMap: (f = msg.getValuesMap()) ? f.toObject(includeInstance, proto.rlabcontrol.Value.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rlabcontrol.SettingValue}
 */
proto.rlabcontrol.SettingValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rlabcontrol.SettingValue;
  return proto.rlabcontrol.SettingValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rlabcontrol.SettingValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rlabcontrol.SettingValue}
 */
proto.rlabcontrol.SettingValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getValuesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.rlabcontrol.Value.deserializeBinaryFromReader, "", new proto.rlabcontrol.Value());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rlabcontrol.SettingValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rlabcontrol.SettingValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rlabcontrol.SettingValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rlabcontrol.SettingValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValuesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.rlabcontrol.Value.serializeBinaryToWriter);
  }
};


/**
 * map<string, Value> values = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.rlabcontrol.Value>}
 */
proto.rlabcontrol.SettingValue.prototype.getValuesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.rlabcontrol.Value>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.rlabcontrol.Value));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.rlabcontrol.SettingValue} returns this
 */
proto.rlabcontrol.SettingValue.prototype.clearValuesMap = function() {
  this.getValuesMap().clear();
  return this;};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.rlabcontrol.Value.oneofGroups_ = [[1,2,3,4]];

/**
 * @enum {number}
 */
proto.rlabcontrol.Value.ValueCase = {
  VALUE_NOT_SET: 0,
  STRING_VALUE: 1,
  INT_VALUE: 2,
  FLOAT_VALUE: 3,
  BOOL_VALUE: 4
};

/**
 * @return {proto.rlabcontrol.Value.ValueCase}
 */
proto.rlabcontrol.Value.prototype.getValueCase = function() {
  return /** @type {proto.rlabcontrol.Value.ValueCase} */(jspb.Message.computeOneofCase(this, proto.rlabcontrol.Value.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rlabcontrol.Value.prototype.toObject = function(opt_includeInstance) {
  return proto.rlabcontrol.Value.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rlabcontrol.Value} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rlabcontrol.Value.toObject = function(includeInstance, msg) {
  var f, obj = {
    stringValue: jspb.Message.getFieldWithDefault(msg, 1, ""),
    intValue: jspb.Message.getFieldWithDefault(msg, 2, 0),
    floatValue: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    boolValue: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rlabcontrol.Value}
 */
proto.rlabcontrol.Value.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rlabcontrol.Value;
  return proto.rlabcontrol.Value.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rlabcontrol.Value} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rlabcontrol.Value}
 */
proto.rlabcontrol.Value.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStringValue(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIntValue(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFloatValue(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBoolValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rlabcontrol.Value.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rlabcontrol.Value.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rlabcontrol.Value} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rlabcontrol.Value.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional string string_value = 1;
 * @return {string}
 */
proto.rlabcontrol.Value.prototype.getStringValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rlabcontrol.Value} returns this
 */
proto.rlabcontrol.Value.prototype.setStringValue = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.rlabcontrol.Value.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.rlabcontrol.Value} returns this
 */
proto.rlabcontrol.Value.prototype.clearStringValue = function() {
  return jspb.Message.setOneofField(this, 1, proto.rlabcontrol.Value.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rlabcontrol.Value.prototype.hasStringValue = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 int_value = 2;
 * @return {number}
 */
proto.rlabcontrol.Value.prototype.getIntValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.rlabcontrol.Value} returns this
 */
proto.rlabcontrol.Value.prototype.setIntValue = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.rlabcontrol.Value.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.rlabcontrol.Value} returns this
 */
proto.rlabcontrol.Value.prototype.clearIntValue = function() {
  return jspb.Message.setOneofField(this, 2, proto.rlabcontrol.Value.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rlabcontrol.Value.prototype.hasIntValue = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional float float_value = 3;
 * @return {number}
 */
proto.rlabcontrol.Value.prototype.getFloatValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.rlabcontrol.Value} returns this
 */
proto.rlabcontrol.Value.prototype.setFloatValue = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.rlabcontrol.Value.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.rlabcontrol.Value} returns this
 */
proto.rlabcontrol.Value.prototype.clearFloatValue = function() {
  return jspb.Message.setOneofField(this, 3, proto.rlabcontrol.Value.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rlabcontrol.Value.prototype.hasFloatValue = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool bool_value = 4;
 * @return {boolean}
 */
proto.rlabcontrol.Value.prototype.getBoolValue = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rlabcontrol.Value} returns this
 */
proto.rlabcontrol.Value.prototype.setBoolValue = function(value) {
  return jspb.Message.setOneofField(this, 4, proto.rlabcontrol.Value.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.rlabcontrol.Value} returns this
 */
proto.rlabcontrol.Value.prototype.clearBoolValue = function() {
  return jspb.Message.setOneofField(this, 4, proto.rlabcontrol.Value.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rlabcontrol.Value.prototype.hasBoolValue = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rlabcontrol.MeasurementResult.prototype.toObject = function(opt_includeInstance) {
  return proto.rlabcontrol.MeasurementResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rlabcontrol.MeasurementResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rlabcontrol.MeasurementResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    dataMap: (f = msg.getDataMap()) ? f.toObject(includeInstance, proto.rlabcontrol.NumericArray.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rlabcontrol.MeasurementResult}
 */
proto.rlabcontrol.MeasurementResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rlabcontrol.MeasurementResult;
  return proto.rlabcontrol.MeasurementResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rlabcontrol.MeasurementResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rlabcontrol.MeasurementResult}
 */
proto.rlabcontrol.MeasurementResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getDataMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.rlabcontrol.NumericArray.deserializeBinaryFromReader, "", new proto.rlabcontrol.NumericArray());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rlabcontrol.MeasurementResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rlabcontrol.MeasurementResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rlabcontrol.MeasurementResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rlabcontrol.MeasurementResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDataMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.rlabcontrol.NumericArray.serializeBinaryToWriter);
  }
};


/**
 * map<string, NumericArray> data = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.rlabcontrol.NumericArray>}
 */
proto.rlabcontrol.MeasurementResult.prototype.getDataMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.rlabcontrol.NumericArray>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.rlabcontrol.NumericArray));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.rlabcontrol.MeasurementResult} returns this
 */
proto.rlabcontrol.MeasurementResult.prototype.clearDataMap = function() {
  this.getDataMap().clear();
  return this;};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rlabcontrol.NumericArray.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rlabcontrol.NumericArray.prototype.toObject = function(opt_includeInstance) {
  return proto.rlabcontrol.NumericArray.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rlabcontrol.NumericArray} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rlabcontrol.NumericArray.toObject = function(includeInstance, msg) {
  var f, obj = {
    values: msg.getValues_asB64(),
    dtype: jspb.Message.getFieldWithDefault(msg, 2, 0),
    shapeList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rlabcontrol.NumericArray}
 */
proto.rlabcontrol.NumericArray.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rlabcontrol.NumericArray;
  return proto.rlabcontrol.NumericArray.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rlabcontrol.NumericArray} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rlabcontrol.NumericArray}
 */
proto.rlabcontrol.NumericArray.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValues(value);
      break;
    case 2:
      var value = /** @type {!proto.rlabcontrol.DataType} */ (reader.readEnum());
      msg.setDtype(value);
      break;
    case 3:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addShape(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rlabcontrol.NumericArray.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rlabcontrol.NumericArray.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rlabcontrol.NumericArray} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rlabcontrol.NumericArray.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValues_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getDtype();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getShapeList();
  if (f.length > 0) {
    writer.writePackedInt32(
      3,
      f
    );
  }
};


/**
 * optional bytes values = 1;
 * @return {!(string|Uint8Array)}
 */
proto.rlabcontrol.NumericArray.prototype.getValues = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes values = 1;
 * This is a type-conversion wrapper around `getValues()`
 * @return {string}
 */
proto.rlabcontrol.NumericArray.prototype.getValues_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValues()));
};


/**
 * optional bytes values = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValues()`
 * @return {!Uint8Array}
 */
proto.rlabcontrol.NumericArray.prototype.getValues_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValues()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rlabcontrol.NumericArray} returns this
 */
proto.rlabcontrol.NumericArray.prototype.setValues = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional DataType dtype = 2;
 * @return {!proto.rlabcontrol.DataType}
 */
proto.rlabcontrol.NumericArray.prototype.getDtype = function() {
  return /** @type {!proto.rlabcontrol.DataType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.rlabcontrol.DataType} value
 * @return {!proto.rlabcontrol.NumericArray} returns this
 */
proto.rlabcontrol.NumericArray.prototype.setDtype = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * repeated int32 shape = 3;
 * @return {!Array<number>}
 */
proto.rlabcontrol.NumericArray.prototype.getShapeList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.rlabcontrol.NumericArray} returns this
 */
proto.rlabcontrol.NumericArray.prototype.setShapeList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.rlabcontrol.NumericArray} returns this
 */
proto.rlabcontrol.NumericArray.prototype.addShape = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rlabcontrol.NumericArray} returns this
 */
proto.rlabcontrol.NumericArray.prototype.clearShapeList = function() {
  return this.setShapeList([]);
};


/**
 * @enum {number}
 */
proto.rlabcontrol.DataType = {
  UNKNOWN: 0,
  FLOAT32: 1,
  FLOAT64: 2,
  INT32: 3,
  INT64: 4
};

goog.object.extend(exports, proto.rlabcontrol);
